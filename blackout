#!/bin/bash
# blackout - Toggle physical monitor to black using aggressive gamma/color manipulation
# Author: Jason (@zudsniper)
# Version: 2.0.0 - Fixed display detection and more aggressive blackout

set -euo pipefail

VERSION="2.0.0"
SCRIPT_NAME="blackout"
STATE_DIR="$HOME/.local/state/$SCRIPT_NAME"
STATE_FILE="$STATE_DIR/display_state"
SETTINGS_BACKUP="$STATE_DIR/settings_backup"
LOCK_FILE="/tmp/$SCRIPT_NAME.lock"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Ensure state directory exists
mkdir -p "$STATE_DIR"

# Auto-detect display
detect_display() {
    # Check for running X server
    if [ -e /tmp/.X1-lock ]; then
        echo ":1"
    elif [ -e /tmp/.X0-lock ]; then
        echo ":0"
    elif [ -n "${DISPLAY:-}" ]; then
        echo "$DISPLAY"
    else
        # Try to find from process
        local xorg_display=$(ps aux | grep -E "[X]org.*-auth" | grep -oE "vt[0-9]+" | head -1 | sed 's/vt//')
        if [ -n "$xorg_display" ]; then
            echo ":$((xorg_display - 2))"
        else
            echo ":0"  # fallback
        fi
    fi
}
# Set display environment
setup_display() {
    local display="$1"
    export DISPLAY="$display"
    export XAUTHORITY="${XAUTHORITY:-$HOME/.Xauthority}"
    
    # Try to find the correct Xauthority
    if [ ! -f "$XAUTHORITY" ]; then
        if [ -f "/run/user/$(id -u)/gdm/Xauthority" ]; then
            export XAUTHORITY="/run/user/$(id -u)/gdm/Xauthority"
        elif [ -f "$HOME/.Xauthority" ]; then
            export XAUTHORITY="$HOME/.Xauthority"
        fi
    fi
}

# Lock mechanism
acquire_lock() {
    local timeout=5
    local elapsed=0
    while [ $elapsed -lt $timeout ]; do
        if mkdir "$LOCK_FILE" 2>/dev/null; then
            trap 'rm -rf "$LOCK_FILE"' EXIT
            return 0
        fi
        sleep 0.1
        elapsed=$((elapsed + 1))
    done
    echo -e "${RED}Error: Could not acquire lock${NC}" >&2
    exit 1
}

# Get display output names
get_displays() {
    xrandr 2>/dev/null | grep " connected" | awk '{print $1}'
}
# Save current settings
save_settings() {
    local display="$1"
    setup_display "$display"
    
    echo "display=$display" > "$SETTINGS_BACKUP"
    
    # Save gamma for each output
    for output in $(get_displays); do
        # Get current brightness
        local brightness=$(xrandr --verbose 2>/dev/null | awk -v out="$output" '
            $0 ~ out " connected" {found=1}
            found && /Brightness:/ {print $2; exit}
        ')
        [ -z "$brightness" ] && brightness="1.0"
        
        # Get current gamma (if available)
        local gamma=$(xrandr --verbose 2>/dev/null | awk -v out="$output" '
            $0 ~ out " connected" {found=1}
            found && /Gamma:/ {print $2; exit}
        ')
        [ -z "$gamma" ] && gamma="1.0:1.0:1.0"
        
        echo "${output}_brightness=$brightness" >> "$SETTINGS_BACKUP"
        echo "${output}_gamma=$gamma" >> "$SETTINGS_BACKUP"
    done
    
    # Save xgamma if available
    if command -v xgamma &>/dev/null; then
        xgamma 2>&1 | grep "gamma" | sed 's/.*Red  //' > "$STATE_DIR/xgamma_backup" || true
    fi
}
# Apply aggressive blackout
apply_blackout() {
    local display="$1"
    setup_display "$display"
    
    echo -e "${YELLOW}Applying aggressive blackout on display $display...${NC}"
    
    # Method 1: Set gamma and brightness to near-zero for all outputs
    for output in $(get_displays); do
        echo "  Blackout $output..."
        # Use extremely low values (0.01 is darker than 0.1)
        xrandr --output "$output" --gamma 0.01:0.01:0.01 --brightness 0.01 2>/dev/null || {
            # Fallback to slightly higher if driver rejects
            xrandr --output "$output" --gamma 0.05:0.05:0.05 --brightness 0.05 2>/dev/null || {
                echo -e "${YELLOW}    Warning: Could not set extreme values, trying moderate${NC}"
                xrandr --output "$output" --gamma 0.1:0.1:0.1 --brightness 0.1 2>/dev/null
            }
        }
    done
    
    # Method 2: Use xgamma for additional darkening
    if command -v xgamma &>/dev/null; then
        echo "  Applying xgamma blackout..."
        xgamma -gamma 0.01 2>/dev/null || xgamma -gamma 0.1 2>/dev/null || true
    fi
    
    # Method 3: Try xcalib if available (often more effective)
    if command -v xcalib &>/dev/null; then
        echo "  Applying xcalib blackout..."
        xcalib -co 1 -a 2>/dev/null || true  # Set contrast to minimum
    fi
}
# Restore display
restore_display() {
    local display="$1"
    setup_display "$display"
    
    echo -e "${YELLOW}Restoring display $display...${NC}"
    
    # Read saved settings
    if [ -f "$SETTINGS_BACKUP" ]; then
        while IFS='=' read -r key value; do
            if [[ "$key" == *"_brightness" ]]; then
                local output="${key%_brightness}"
                echo "  Restoring brightness for $output to $value"
                xrandr --output "$output" --brightness "$value" 2>/dev/null || true
            elif [[ "$key" == *"_gamma" ]]; then
                local output="${key%_gamma}"
                echo "  Restoring gamma for $output to $value"
                xrandr --output "$output" --gamma "$value" 2>/dev/null || true
            fi
        done < "$SETTINGS_BACKUP"
    else
        # Default restore if no backup
        for output in $(get_displays); do
            echo "  Restoring defaults for $output"
            xrandr --output "$output" --gamma 1.0:1.0:1.0 --brightness 1.0 2>/dev/null || true
        done
    fi
    
    # Restore xgamma if available
    if command -v xgamma &>/dev/null && [ -f "$STATE_DIR/xgamma_backup" ]; then
        local gamma_values=$(cat "$STATE_DIR/xgamma_backup" 2>/dev/null || echo "1.000, Green  1.000, Blue  1.000")
        local red=$(echo "$gamma_values" | grep -oE "^[0-9.]+" || echo "1.0")
        xgamma -rgamma "$red" 2>/dev/null || true
    fi
    
    # Reset xcalib if available
    if command -v xcalib &>/dev/null; then
        xcalib -clear 2>/dev/null || true
    fi
}
# Get/set state
get_state() {
    [ -f "$STATE_FILE" ] && cat "$STATE_FILE" || echo "normal"
}

set_state() {
    echo "$1" > "$STATE_FILE"
}

# Toggle display
toggle() {
    acquire_lock
    
    local display=$(detect_display)
    local current_state=$(get_state)
    
    echo "Detected display: $display"
    echo "Current state: $current_state"
    
    if [ "$current_state" = "normal" ]; then
        save_settings "$display"
        apply_blackout "$display"
        set_state "blackout"
        echo -e "${GREEN}✓ Display blackout enabled${NC}"
    else
        restore_display "$display"
        set_state "normal"
        echo -e "${GREEN}✓ Display restored${NC}"
    fi
}

# Force restore
force_restore() {
    acquire_lock
    local display=$(detect_display)
    
    echo -e "${YELLOW}Force restoring all displays...${NC}"
    setup_display "$display"
    
    # Brute force restoration
    for output in $(get_displays); do
        xrandr --output "$output" --gamma 1:1:1 --brightness 1 2>/dev/null || true
    done
    
    command -v xgamma &>/dev/null && xgamma -gamma 1.0 2>/dev/null || true
    command -v xcalib &>/dev/null && xcalib -clear 2>/dev/null || true
    
    # Try DDC/CI as last resort
    if command -v ddcutil &>/dev/null; then
        ddcutil setvcp 10 75 2>/dev/null || true  # Brightness to 75%
        ddcutil setvcp 12 75 2>/dev/null || true  # Contrast to 75%
    fi
    
    set_state "normal"
    echo -e "${GREEN}✓ Display force restored${NC}"
}
# Status check
status() {
    local state=$(get_state)
    local display=$(detect_display)
    
    echo "Blackout Status:"
    echo "  State: $state"
    echo "  Display: $display"
    echo "  State File: $STATE_FILE"
    
    setup_display "$display" 2>/dev/null
    echo -e "\nConnected Displays:"
    for output in $(get_displays); do
        echo "  - $output"
    done
    
    echo -e "\nAvailable tools:"
    command -v xrandr &>/dev/null && echo "  ✓ xrandr" || echo "  ✗ xrandr (install x11-xserver-utils)"
    command -v xgamma &>/dev/null && echo "  ✓ xgamma" || echo "  ✗ xgamma (install x11-xserver-utils)"
    command -v xcalib &>/dev/null && echo "  ✓ xcalib" || echo "  ✗ xcalib (install xcalib for better control)"
    command -v ddcutil &>/dev/null && echo "  ✓ ddcutil" || echo "  ✗ ddcutil (install ddcutil for hardware control)"
}

# Version
version() {
    echo "$SCRIPT_NAME version $VERSION"
}

# Help
usage() {
    cat <<EOF
$SCRIPT_NAME v$VERSION - Aggressive display blackout for physical monitors

Usage:
    $SCRIPT_NAME [COMMAND]

Commands:
    toggle      Toggle between normal and blackout (default)
    on          Enable blackout
    off         Disable blackout  
    status      Show current state and config
    restore     Force restore display (emergency)
    version     Show version
    help        Show this help

Features:
    - Auto-detects X11 display (:0, :1, etc)
    - Multiple blackout methods for effectiveness
    - Preserves settings for accurate restore
    - Remote desktop remains visible

For better results, install:
    sudo apt install x11-xserver-utils xcalib ddcutil

Repository: https://github.com/zudsniper/blackout
EOF
}
# Main command handler
case "${1:-toggle}" in
    toggle)
        toggle
        ;;
    on)
        if [ "$(get_state)" = "blackout" ]; then
            echo -e "${YELLOW}Display already in blackout mode${NC}"
        else
            toggle
        fi
        ;;
    off)
        if [ "$(get_state)" = "normal" ]; then
            echo -e "${YELLOW}Display already in normal mode${NC}"
        else
            toggle
        fi
        ;;
    status)
        status
        ;;
    restore|force-restore|panic)
        force_restore
        ;;
    version|--version|-v)
        version
        ;;
    help|--help|-h)
        usage
        ;;
    *)
        echo -e "${RED}Unknown command: $1${NC}" >&2
        usage
        exit 1
        ;;
esac