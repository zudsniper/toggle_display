#!/bin/bash
# blackout - Toggle physical monitor brightness to black while maintaining remote visibility
# Author: Jason (@zudsniper)
# Repository: https://github.com/zudsniper/blackout

set -euo pipefail

VERSION="1.0.0"
SCRIPT_NAME="blackout"
STATE_DIR="$HOME/.local/state/$SCRIPT_NAME"
STATE_FILE="$STATE_DIR/display_state"
GAMMA_BACKUP="$STATE_DIR/gamma_backup"
LOCK_FILE="/tmp/$SCRIPT_NAME.lock"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Ensure state directory exists
mkdir -p "$STATE_DIR"

# Lock mechanism to prevent race conditions
acquire_lock() {
    local timeout=5
    local elapsed=0
    while [ $elapsed -lt $timeout ]; do
        if mkdir "$LOCK_FILE" 2>/dev/null; then
            trap 'rm -rf "$LOCK_FILE"' EXIT
            return 0
        fi
        sleep 0.1
        elapsed=$((elapsed + 1))
    done
    echo -e "${RED}Error: Could not acquire lock. Another instance may be running.${NC}" >&2
    exit 1
}
# Detect display server
detect_display_server() {
    if [ -n "${WAYLAND_DISPLAY:-}" ]; then
        echo "wayland"
    elif [ -n "${DISPLAY:-}" ]; then
        echo "x11"
    else
        echo -e "${RED}Error: No display server detected${NC}" >&2
        exit 1
    fi
}

# Get current display output name
get_display_output() {
    local server="$1"
    if [ "$server" = "x11" ]; then
        xrandr --current | grep " connected" | head -1 | awk '{print $1}'
    else
        # For Wayland, try wlr-randr first, fallback to assuming eDP-1 or DP-1
        if command -v wlr-randr &>/dev/null; then
            wlr-randr | grep -E "^[[:alnum:]-]+" | head -1
        else
            echo "eDP-1"  # Common laptop display name
        fi
    fi
}
# Save current gamma values
save_gamma() {
    local server="$1"
    local output="$2"
    
    if [ "$server" = "x11" ]; then
        # Extract current gamma from xrandr verbose output
        xrandr --verbose | awk -v disp="$output" '
            $0 ~ disp " connected" {found=1}
            found && /Gamma:/ {print $2; exit}
        ' > "$GAMMA_BACKUP"
        
        # If no gamma found, save default
        if [ ! -s "$GAMMA_BACKUP" ]; then
            echo "1.0:1.0:1.0" > "$GAMMA_BACKUP"
        fi
    else
        # Wayland doesn't easily expose current gamma, assume default
        echo "1.0:1.0:1.0" > "$GAMMA_BACKUP"
    fi
}

# Apply blackout (set gamma to minimum)
apply_blackout() {
    local server="$1"
    local output="$2"    
    if [ "$server" = "x11" ]; then
        # Set gamma to near-zero (0.1 to avoid complete black which some drivers reject)
        xrandr --output "$output" --gamma 0.1:0.1:0.1 --brightness 0.1
    else
        # For Wayland, use wlr-randr if available
        if command -v wlr-randr &>/dev/null; then
            wlr-randr --output "$output" --gamma 0.1:0.1:0.1
        else
            echo -e "${YELLOW}Warning: wlr-randr not found. Trying ddcutil fallback...${NC}" >&2
            use_ddcutil_fallback "blackout"
        fi
    fi
}

# Restore normal display
restore_display() {
    local server="$1"
    local output="$2"
    
    # Read saved gamma or use default
    local gamma="1.0:1.0:1.0"
    if [ -f "$GAMMA_BACKUP" ]; then
        gamma=$(cat "$GAMMA_BACKUP")
    fi    
    if [ "$server" = "x11" ]; then
        xrandr --output "$output" --gamma $gamma --brightness 1.0
    else
        if command -v wlr-randr &>/dev/null; then
            wlr-randr --output "$output" --gamma $gamma
        else
            use_ddcutil_fallback "restore"
        fi
    fi
}

# DDC/CI fallback for hardware-level control
use_ddcutil_fallback() {
    local action="$1"
    
    if ! command -v ddcutil &>/dev/null; then
        echo -e "${RED}Error: Neither wlr-randr nor ddcutil available for Wayland${NC}" >&2
        echo "Install with: sudo apt install ddcutil" >&2
        exit 1
    fi
    
    if [ "$action" = "blackout" ]; then
        # Save current brightness
        ddcutil getvcp 10 | grep -oP 'current value =\s+\K\d+' > "$STATE_DIR/brightness_backup" || true        # Set brightness to minimum (not 0 to avoid monitor standby)
        ddcutil setvcp 10 1
    else
        # Restore brightness
        local brightness=50  # Default fallback
        if [ -f "$STATE_DIR/brightness_backup" ]; then
            brightness=$(cat "$STATE_DIR/brightness_backup")
        fi
        ddcutil setvcp 10 "$brightness"
    fi
}

# Get current state
get_state() {
    if [ -f "$STATE_FILE" ]; then
        cat "$STATE_FILE"
    else
        echo "normal"
    fi
}

# Set state
set_state() {
    echo "$1" > "$STATE_FILE"
}
# Toggle display
toggle() {
    acquire_lock
    
    local server=$(detect_display_server)
    local output=$(get_display_output "$server")
    local current_state=$(get_state)
    
    if [ -z "$output" ]; then
        echo -e "${RED}Error: Could not detect display output${NC}" >&2
        exit 1
    fi
    
    echo "Display server: $server"
    echo "Output: $output"
    echo "Current state: $current_state"
    
    if [ "$current_state" = "normal" ]; then
        echo -e "${YELLOW}Applying blackout...${NC}"
        save_gamma "$server" "$output"
        apply_blackout "$server" "$output"
        set_state "blackout"
        echo -e "${GREEN}Display blackout enabled${NC}"
    else
        echo -e "${YELLOW}Restoring display...${NC}"        restore_display "$server" "$output"
        set_state "normal"
        echo -e "${GREEN}Display restored${NC}"
    fi
}

# Force restore (emergency recovery)
force_restore() {
    acquire_lock
    
    local server=$(detect_display_server)
    local output=$(get_display_output "$server")
    
    echo -e "${YELLOW}Force restoring display...${NC}"
    restore_display "$server" "$output"
    set_state "normal"
    
    # Also try DDC restore as backup
    if command -v ddcutil &>/dev/null; then
        ddcutil setvcp 10 75 2>/dev/null || true
    fi
    
    echo -e "${GREEN}Display force restored${NC}"
}
# Status check
status() {
    local state=$(get_state)
    local server=$(detect_display_server)
    
    echo "Blackout Status:"
    echo "  State: $state"
    echo "  Display Server: $server"
    echo "  State File: $STATE_FILE"
    
    if [ -f "$GAMMA_BACKUP" ]; then
        echo "  Backed up gamma: $(cat $GAMMA_BACKUP)"
    fi
}

# Version
version() {
    echo "$SCRIPT_NAME version $VERSION"
}

# Help
usage() {
    cat <<EOF
$SCRIPT_NAME - Toggle physical monitor to black while maintaining remote visibility

Usage:    $SCRIPT_NAME [COMMAND]

Commands:
    toggle      Toggle between normal and blackout states (default)
    on          Enable blackout (make screen black)
    off         Disable blackout (restore normal display)
    status      Show current state
    restore     Force restore display (emergency recovery)
    version     Show version
    help        Show this help

Examples:
    $SCRIPT_NAME          # Toggle display state
    $SCRIPT_NAME on       # Black out the display  
    $SCRIPT_NAME off      # Restore normal display
    $SCRIPT_NAME status   # Check current state

Notes:
    - Display appears normal to remote desktop/VNC
    - Only physical monitor is affected
    - State persists in ~/.local/state/blackout
    - Requires xrandr (X11) or wlr-randr/ddcutil (Wayland)

Repository: https://github.com/zudsniper/blackout
EOF
}
# Main command routing
case "${1:-toggle}" in
    toggle)
        toggle
        ;;
    on)
        if [ "$(get_state)" = "blackout" ]; then
            echo -e "${YELLOW}Display already in blackout mode${NC}"
        else
            toggle
        fi
        ;;
    off)
        if [ "$(get_state)" = "normal" ]; then
            echo -e "${YELLOW}Display already in normal mode${NC}"
        else
            toggle
        fi
        ;;
    status)
        status
        ;;
    restore|force-restore)
        force_restore
        ;;
    version|--version|-v)        version
        ;;
    help|--help|-h)
        usage
        ;;
    *)
        echo -e "${RED}Unknown command: $1${NC}" >&2
        usage
        exit 1
        ;;
esac